#!/usr/bin/env python3

# –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞—Å—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.
# –û–ó–£ (RAM)
# –î–∏—Å–∫–∞
# –°–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫)
# MySQL

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ?

# –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
# –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, CPU –ø—Ä–µ–≤—ã—Å–∏—Ç 50% ‚Äî –±—É–¥–µ—Ç 1 —Å–æ–æ–±—â–µ–Ω–∏–µ.
# –ü–æ–∫–∞ –æ–Ω –æ—Å—Ç–∞—ë—Ç—Å—è >50% ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è.
# –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∞–¥–∞–µ—Ç –Ω–∏–∂–µ ‚Äî Telegram-–±–æ—Ç –Ω–∞–ø–∏—à–µ—Ç, —á—Ç–æ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.

# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—á–∏—Ç—ã–≤–∞–µ—Ç state.json, —á—Ç–æ–±—ã "–ø–æ–º–Ω–∏—Ç—å", –æ —á—ë–º —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª.
# –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.

# –î–æ–±–∞–≤–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è state –≤ JSON-—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.
# –°–æ–∑–¥–∞—ë—Ç—Å—è —Ñ–∞–π–ª state.json –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è cpu_monitor_bot.py.
# –°–æ—Å—Ç–æ—è–Ω–∏–µ (cpu, ram, disk, net, mysql) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ.
# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

# –¥–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∞–ª–µ—Ä—Ç—ã –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ —á–∞—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —á–∞—â–µ.
# –î–æ–±–∞–≤–∏–º —Ñ–∞–π–ª last_alert_time.json, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
# –ü—Ä–∏ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –ø—Ä–æ—à–ª–æ –ª–∏ 60 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
# –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã.
# –ê–ª–µ—Ä—Ç—ã –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ —á–∞—Å, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –Ω–æ—Ä–º—É ‚Äî –ø—Ä–∏—Ö–æ–¥—è—Ç —Å—Ä–∞–∑—É.

import psutil
import requests
import time
import logging
import subprocess
import json
import os
import datetime
from datetime import time as dtime
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CHECK_INTERVAL = 10  # –º–∏–Ω—É—Ç
CPU_THRESHOLD = 90
RAM_THRESHOLD = 90
DISK_THRESHOLD = 90
NET_THRESHOLD_MB = 2000
MYSQL_CONN_THRESHOLD = 60

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_FILE = os.path.join(SCRIPT_DIR, 'monitor.log')
STATE_FILE = os.path.join(SCRIPT_DIR, 'state.json')
ALERT_STATE_FILE = os.path.join(SCRIPT_DIR, 'last_alert_time.json')
ACCUMULATOR_FILE = os.path.join(SCRIPT_DIR, 'accumulator.json')

ALERT_INTERVAL_MINUTES = 60
ACCUMULATE_DURATION = 60
ACCUMULATE_LIMIT = int(ACCUMULATE_DURATION / CHECK_INTERVAL)
ACCUMULATE_THRESHOLD = int(ACCUMULATE_LIMIT * 0.9)

DEFAULT_STATE = {'cpu': False, 'ram': False, 'disk': False, 'net': False, 'mysql': False}

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def is_quiet_time():
    now = datetime.datetime.now().time()
    return dtime(23, 0) <= now or now <= dtime(7, 0)

def load_last_alert_time():
    if os.path.exists(ALERT_STATE_FILE):
        try:
            with open(ALERT_STATE_FILE, 'r') as f:
                ts = json.load(f).get('last_alert_time')
                if not ts:
                    return datetime.datetime.min
                try:
                    return datetime.datetime.strptime(ts, "%Y-%m-%dT%H:%M:%S.%f")
                except ValueError:
                    return datetime.datetime.strptime(ts, "%Y-%m-%dT%H:%M:%S")
        except:
            return datetime.datetime.min
    return datetime.datetime.min

def save_last_alert_time(dt=None):
    if dt is None:
        dt = datetime.datetime.now()
    with open(ALERT_STATE_FILE, 'w') as f:
        json.dump({'last_alert_time': dt.isoformat()}, f)

def send_telegram_message(message):
    if is_quiet_time():
        logging.info("‚è∞ –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    url = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage'
    payload = {'chat_id': TELEGRAM_CHAT_ID, 'text': message}
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.ok:
            logging.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.text}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def get_mysql_total_connections():
    try:
        cmd = '/usr/bin/mysql -e "SHOW STATUS LIKE \'Threads_connected\';"'
        output = subprocess.check_output(cmd, shell=True, universal_newlines=True)
        lines = output.strip().split('\n')
        if len(lines) >= 2:
            return int(lines[1].split('\t')[1])
    except Exception as e:
        logging.error(f"MySQL –æ—à–∏–±–∫–∞: {e}")
    return -1

def load_state():
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r') as f:
                return {**DEFAULT_STATE, **json.load(f)}
        except:
            pass
    return DEFAULT_STATE.copy()

def save_state(state):
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f)

def load_accumulator():
    if os.path.exists(ACCUMULATOR_FILE):
        try:
            with open(ACCUMULATOR_FILE, 'r') as f:
                return json.load(f)
        except:
            pass
    return {k: [] for k in DEFAULT_STATE}

def save_accumulator(data):
    with open(ACCUMULATOR_FILE, 'w') as f:
        json.dump(data, f)

def should_alert(acc):
    result = []
    if len([x for x in acc['cpu'] if x > CPU_THRESHOLD]) >= ACCUMULATE_THRESHOLD:
        result.append('cpu')
    if len([x for x in acc['ram'] if x > RAM_THRESHOLD]) >= ACCUMULATE_THRESHOLD:
        result.append('ram')
    if len([x for x in acc['disk'] if x > DISK_THRESHOLD]) >= ACCUMULATE_THRESHOLD:
        result.append('disk')
    if len([x for x in acc['mysql'] if x > MYSQL_CONN_THRESHOLD]) >= ACCUMULATE_THRESHOLD:
        result.append('mysql')
    if len([1 for sent, recv in acc['net'] if sent > NET_THRESHOLD_MB or recv > NET_THRESHOLD_MB]) >= ACCUMULATE_THRESHOLD:
        result.append('net')
    return result

def get_exceeded_details(acc, exceeded_keys):
    details = []
    if 'cpu' in exceeded_keys and acc['cpu']:
        avg = sum(acc['cpu']) / len(acc['cpu'])
        details.append(f"- cpu (—Å—Ä–µ–¥–Ω–µ–µ: {avg:.2f}%)")
    if 'ram' in exceeded_keys and acc['ram']:
        avg = sum(acc['ram']) / len(acc['ram'])
        details.append(f"- ram (—Å—Ä–µ–¥–Ω–µ–µ: {avg:.2f}%)")
    if 'disk' in exceeded_keys and acc['disk']:
        avg = sum(acc['disk']) / len(acc['disk'])
        details.append(f"- disk (—Å—Ä–µ–¥–Ω–µ–µ: {avg:.2f}%)")
    if 'mysql' in exceeded_keys and acc['mysql']:
        avg = sum(acc['mysql']) / len(acc['mysql'])
        details.append(f"- mysql (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {avg:.2f})")
    if 'net' in exceeded_keys and acc['net']:
        sent_avg = sum([x[0] for x in acc['net']]) / len(acc['net'])
        recv_avg = sum([x[1] for x in acc['net']]) / len(acc['net'])
        details.append(f"- net (‚Üë {sent_avg:.2f} MB, ‚Üì {recv_avg:.2f} MB)")
    return details

def monitor():
    net_io_prev = psutil.net_io_counters()
    state = load_state()
    accumulator = load_accumulator()
    send_telegram_message("üîç –°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    while True:
        cpu = psutil.cpu_percent(interval=1)
        ram = psutil.virtual_memory().percent
        disk = psutil.disk_usage('/').percent
        net_io = psutil.net_io_counters()
        sent_mb = (net_io.bytes_sent - net_io_prev.bytes_sent) / (1024 * 1024)
        recv_mb = (net_io.bytes_recv - net_io_prev.bytes_recv) / (1024 * 1024)
        net_io_prev = net_io
        mysql_conn = get_mysql_total_connections()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        accumulator['cpu'].append(cpu)
        accumulator['ram'].append(ram)
        accumulator['disk'].append(disk)
        accumulator['mysql'].append(mysql_conn if mysql_conn >= 0 else 0)
        accumulator['net'].append((sent_mb, recv_mb))

        for k in ['cpu', 'ram', 'disk', 'mysql']:
            accumulator[k] = accumulator[k][-ACCUMULATE_LIMIT:]
        accumulator['net'] = accumulator['net'][-ACCUMULATE_LIMIT:]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        exceeded = should_alert(accumulator)
        now = datetime.datetime.now()
        minutes_since_last = (now - load_last_alert_time()).total_seconds() / 60

        if exceeded and minutes_since_last >= ALERT_INTERVAL_MINUTES:
            message = "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:\n" + "\n".join(get_exceeded_details(accumulator, exceeded))
            send_telegram_message(message)
            save_last_alert_time()
        elif exceeded:
            logging.info("–ü—Ä–µ–≤—ã—à–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ–¥–∞–≤–Ω–æ.")

        save_accumulator(accumulator)
        save_state(state)
        time.sleep(CHECK_INTERVAL * 60)

if __name__ == '__main__':
    logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
    monitor()
